/**
 * Производил рассчет цикломатической сложности по формуле
 * M = P + 1
 * M - цикломатическая сложность
 * P - количество узлов содержащих условие
 * */

/**
 * Исходный код
 * ЦС = 15
 * Код написан на typescript
 * */
function _setOrderLineStatus(beforeUpdateLines: { [id: number]: OrderLine }, afterUpdateLines: { [id: number]: OrderLine }): void {
  forOwn(afterUpdateLines, (aLine, key) => {
    const { DELETED, NEW, EDITED } = PRODUCT_STATUSES;
    if (aLine.status !== DELETED && aLine.status !== NEW) {
      const bLine = beforeUpdateLines[key];
      aLine.status = '';

      if (aLine.price !== bLine.price) {
        aLine.status = EDITED;
        return;
      }

      const { EXTRA_PRODUCT, GREETING_CARD, PICTURE, QUESTION, COMMENT, CUSTOM_ADDON } = ORDER_LINE_TYPES;
      switch (aLine.type) {
        case EXTRA_PRODUCT:
          if (aLine.id !== bLine.id || aLine.product !== bLine.product) {
            aLine.status = EDITED;
          }
          break;
        case PICTURE:
          if (aLine.details.url !== bLine.details.url) {
            aLine.status = EDITED;
          }
          break;
        case QUESTION:
          if (aLine.id !== bLine.id || aLine.details.answer !== bLine.details.answer) {
            aLine.status = EDITED;
          }
          break;
        case GREETING_CARD:
          if (aLine.id !== bLine.id || aLine.details.text !== bLine.details.text) {
            aLine.status = EDITED;
          }
          break;
        case COMMENT:
          if (aLine.details.comment !== bLine.details.comment) {
            aLine.status = EDITED;
          }
          break;
        case CUSTOM_ADDON:
          if (aLine.price !== bLine.price || aLine.vatRate !== bLine.vatRate
            || aLine.details.name !== bLine.details.name || aLine.details.url !== bLine.details.url) {
            aLine.status = EDITED;
          }
          break;
      }
    }
  });
}

/**
 * Результирующий код
 * ЦС = 5
 *
 * - Сделал возврат из цикла при соответствующем статусе, в результате избавился от внутренних условий
 * - Вынес условия проверки изменяемости оредер лайна в отдельные функции, что позволило избавиться от if
 * - Добавил функцию получения чекера по типу ордер лайна, чтобы избавиться от оператора switch
 * */

function setOrderLineStatus(beforeUpdateLines: { [id: number]: OrderLine }, afterUpdateLines: { [id: number]: OrderLine }): void {
  forOwn(afterUpdateLines, (aLine, key) => {
      const { DELETED, NEW, EDITED } = PRODUCT_STATUSES;

      if (aLine.status === DELETED || aLine.status === NEW) {
        return;
      }

      const bLine = beforeUpdateLines[key];

      if (aLine.price !== bLine.price) {
        aLine.status = EDITED;
        return;
      }

      try {
        const isChanged = getLineStatusChecker(aLine.type);
        aLine.status = isChanged(aLine, bLine) ? EDITED : '';
      } catch (e) {
        return;
      }
    }
  );
}

function getLineStatusChecker(type): (aLine: OrderLine, bLine: OrderLine) => boolean {
  const { EXTRA_PRODUCT, GREETING_CARD, PICTURE, QUESTION, COMMENT, CUSTOM_ADDON } = ORDER_LINE_TYPES;
  const checkers = {
    [EXTRA_PRODUCT]: _isExtraProductChanged,
    [PICTURE]: _isPictureChanged,
    [QUESTION]: _isQuestionChanged,
    [GREETING_CARD]: _isGreetingCardChanged,
    [COMMENT]: _isCommentChanged,
    [CUSTOM_ADDON]: _isCustomAddOnChanged
  };
  return checkers[type];
}

function _isExtraProductChanged(aLine: OrderLine, bLine: OrderLine): boolean {
  return aLine.id !== bLine.id || aLine.product !== bLine.product;
}

function _isCustomAddOnChanged(aLine: OrderLine, bLine: OrderLine): boolean {
  return aLine.price !== bLine.price
    || aLine.vatRate !== bLine.vatRate
    || aLine.details.name !== bLine.details.name
    || aLine.details.url !== bLine.details.url;
}

function _isCommentChanged(aLine: OrderLine, bLine: OrderLine): boolean {
  return aLine.details.comment !== bLine.details.comment;
}

function _isPictureChanged(aLine: OrderLine, bLine: OrderLine): boolean {
  return aLine.details.url !== bLine.details.url;
}

function _isQuestionChanged(aLine: OrderLine, bLine: OrderLine): boolean {
  return aLine.id !== bLine.id || aLine.details.answer !== bLine.details.answer;
}

function _isGreetingCardChanged(aLine: OrderLine, bLine: OrderLine): boolean {
  return aLine.id !== bLine.id || aLine.details.text !== bLine.details.text;
}


/**
 * Исходный код
 * ЦС = 17 в данном случае нельзя говорить, что ЦС этой функции 17, скорее ЦС тут ближе к 1, а 17 это сумма ЦС колбэков
 * для ActionListener, но код выглядит очень запутанным, поэтому я решил его отрефакторить
 * Код написан на java
 * */

 PasswordManager() {
    frame = new JFrame("Password Manager");
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.setSize(400, 650);
    frame.setResizable(false);
    ImageIcon img = new ImageIcon("background.png");
    background = new JLabel("", img, JLabel.CENTER);
    background.setBounds(0, 0, 400, 650);
    background.setVisible(true);
    frame.add(background);

    FrameGUI(frame);

    conn1 = frame.getContentPane();
    ContainerGUI(conn1);

    //Generator buttons settings
    PassGeneBtn = new JButton("GENERATE PASSWORD");
    PassGeneBtn.setBounds(90, 20, 220, 40);
    conn1.add(PassGeneBtn);
    GUIButtonsSetting(PassGeneBtn);

    //generating password
    PassGeneBtn.addActionListener(e -> {
        if (PassGeneBtn == e.getSource()) {
            try {
                int len = Integer.parseInt(JOptionPane.showInputDialog("Enter the password length"));
                if (len > 4) {
                    //  password generator class reference
                    PasswordGenerator pass = new PasswordGenerator();
                    String passwd = pass.generatePassword(len);
                    genePassArea = new JTextArea(5, 4);
                    textArea(passwd, genePassArea);
                    JOptionPane.showMessageDialog(conn1, new JScrollPane(genePassArea), "Copy your password", JOptionPane.INFORMATION_MESSAGE);

                } else
                    JOptionPane.showMessageDialog(conn1, "Password length must be greater than 8!", "Invalid Input Error", JOptionPane.WARNING_MESSAGE);

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(conn1, "Write something", "EXIT!", JOptionPane.ERROR_MESSAGE);
            }
        }
    });

    //searching password
    PassSearchBtn = new JButton("SEARCH PASSWORD");
    GUIButtonsSetting(PassSearchBtn);
    PassSearchBtn.setBounds(90, 300, 220, 40);
    conn1.add(PassSearchBtn);
    PassSearchBtn.addActionListener(e -> {
        if (PassSearchBtn == e.getSource()) {
            try {
                String acc_name = JOptionPane.showInputDialog("Enter your Account Name"); // getting the account name
                if (!acc_name.isBlank()) { // checking if the account name is not empty
                    Object pass = data.get_Acc(acc_name.toLowerCase()); // getting the password of the account name
                    if (pass != null) { // checking if the password is not null
                        searchPassArea = new JTextArea(4, 5); // text area for the password
                        textArea(String.valueOf(pass), searchPassArea); // setting the text area
                        JOptionPane.showMessageDialog(conn1, new JScrollPane(searchPassArea), "Copy your password", JOptionPane.INFORMATION_MESSAGE);
                    } else JOptionPane.showMessageDialog(conn1, "Account not Found!");
                }
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(conn1, "Write something", "EXIT", JOptionPane.ERROR_MESSAGE);
            }
        }
    });

    // deleting password
    PassDeleteBtn = new JButton("DELETE PASSWORD");
    GUIButtonsSetting(PassDeleteBtn);
    PassDeleteBtn.setBounds(90, 370, 220, 40);
    conn1.add(PassDeleteBtn);
    PassDeleteBtn.addActionListener(e -> {
        if (PassDeleteBtn == e.getSource()) {
            try {
                String acc_name = JOptionPane.showInputDialog("Enter the Account Name"); // getting the account name
                if (!acc_name.isBlank()) {
                    data.remove_Acc(acc_name.toLowerCase()); // removing the account name and password from the hashtable
                    JOptionPane.showMessageDialog(conn1, "Delete successfully!"); // showing the message
                } else
                    JOptionPane.showMessageDialog(conn1, "Account not found!", "INFO", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(conn1, "Write something", "EXIT", JOptionPane.ERROR_MESSAGE);
            }
        }

    });
 }

/**
 * Результирующий код
 * ЦС = 1, сумма ЦС коллбеков для ActionListener равна 10
 *
 * - Упростил код с помощью ad-hoc полиморфизма
 * - Для колбэков избавился от else и вложенных if, что позволило уменьшить ЦС
 * */

  PasswordManager() {
         frame = new JFrame("Password Manager");
         frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
         frame.setSize(400, 650);
         frame.setResizable(false);
         ImageIcon img = new ImageIcon("background.png");
         background = new JLabel("", img, JLabel.CENTER);
         background.setBounds(0, 0, 400, 650);
         background.setVisible(true);
         frame.add(background);

         FrameGUI(frame);

         conn1 = frame.getContentPane();
         ContainerGUI(conn1);

         //Generator buttons settings
         PassGeneBtn = new PassGenerateButton();
         PassGeneBtn.addActionListener(e -> GetActionListener(e.getSource()));

         conn1.add(PassGeneBtn);
         GUIButtonsSetting(PassGeneBtn);

         //searching password
         PassSearchBtn = new SearchPasswordButton; PassSearchBtn.addActionListener(e -> GetActionListener(e.getSource()));

         GUIButtonsSetting(PassSearchBtn);
         conn1.add(PassSearchBtn);

         // deleting password
         PassDeleteBtn = new DeletePasswordButton();
         PassDeleteBtn.addActionListener(e -> GetActionListener(e.getSoure()));

         GUIButtonsSetting(PassDeleteBtn);
         conn1.add(PassDeleteBtn);
     }

     public void GetActionListener(DeletePasswordButton b) {
         try {
             String acc_name = JOptionPane.showInputDialog("Enter the Account Name"); // getting the account name

             if (acc_name.isBlank()) {
                 JOptionPane.showMessageDialog(conn1, "Account not found!", "INFO", JOptionPane.INFORMATION_MESSAGE);
             }

             data.remove_Acc(acc_name.toLowerCase()); // removing the account name and password from the hashtable
             JOptionPane.showMessageDialog(conn1, "Delete successfully!"); // showing the message
         } catch (Exception ex) {
             JOptionPane.showMessageDialog(conn1, "Write something", "EXIT", JOptionPane.ERROR_MESSAGE);
         }
     }

     public void GetActionListener(SearchPasswordButton b) {
         try {
             String acc_name = JOptionPane.showInputDialog("Enter your Account Name"); // getting the account name

             if (acc_name.isBlank()) {
                 return;
             }

             Object pass = data.get_Acc(acc_name.toLowerCase()); // getting the password of the account name

             if (pass == null) {
                 JOptionPane.showMessageDialog(conn1, "Account not Found!");
                 return;
             }

             searchPassArea = new JTextArea(4, 5); // text area for the password
             textArea(String.valueOf(pass), searchPassArea); // setting the text area
             JOptionPane.showMessageDialog(conn1, new JScrollPane(searchPassArea), "Copy your password", JOptionPane.INFORMATION_MESSAGE);
         } catch (Exception ex) {
             JOptionPane.showMessageDialog(conn1, "Write something", "EXIT", JOptionPane.ERROR_MESSAGE);
         }
     }

     public void GetActionListener(PassGenerateButton b) {
         try {
             int len = Integer.parseInt(JOptionPane.showInputDialog("Enter the password length"));

             if (len <= 4) {
                 JOptionPane.showMessageDialog(conn1, "Password length must be greater than 8!", "Invalid Input Error", JOptionPane.WARNING_MESSAGE);
                 return;
             }

             //  password generator class reference
             PasswordGenerator pass = new PasswordGenerator();
             String passwd = pass.generatePassword(len);
             genePassArea = new JTextArea(5, 4);
             textArea(passwd, genePassArea);
             JOptionPane.showMessageDialog(conn1, new JScrollPane(genePassArea), "Copy your password", JOptionPane.INFORMATION_MESSAGE);
         } catch (Exception ex) {
             JOptionPane.showMessageDialog(conn1, "Write something", "EXIT!", JOptionPane.ERROR_MESSAGE);
         }
     }


/**
* Заключение.
* В первые столкнулся с цикломатической сложностью. Теперь у меня есть количественная характеристика качества кода,
* которую я использую при code review. А так же изучил приемы понижения ЦС, которые начал применять в повседневной работе
*/
